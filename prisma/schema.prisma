generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String           @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  phone             String?
  role              UserRole         @default(STUDENT)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Parent-Child relationships
  parentId          String?          // Reference to parent user
  parent            User?            @relation("ParentChild", fields: [parentId], references: [id])
  children          User[]           @relation("ParentChild")
  
  accounts          Account[]
  assignmentFiles   AssignmentFile[]
  chatMessages      ChatMessage[]
  instructedCourses Course[]
  documents         Document[]
  enrollments       Enrollment[]
  sessions          Session[]
  submissions       Submission[]     @relation("StudentSubmissions")
  notifications     Notification[]
  instructorAssignments Assignment[] @relation("InstructorAssignments")
  attendances       Attendance[]
  announcements      Announcement[]   // <-- Added relation
  
  // Weekly report relations
  parentReports     WeeklyReport[]   @relation("ParentReports")
  studentReports    WeeklyReport[]   @relation("StudentReports")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Course {
  id             String        @id @default(cuid())
  title          String
  description    String
  instructor     String
  instructorId   String?
  duration       Int
  durationUnit   String
  price          Float
  level          String
  capacity       Int
  startDate      DateTime
  timezone       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  assignments    Assignment[]
  chatMessages   ChatMessage[]
  chatRooms      ChatRoom[]
  instructorUser User?         @relation(fields: [instructorId], references: [id])
  documents      Document[]
  enrollments    Enrollment[]
  schedules      Schedule[]
  attendances    Attendance[]
  announcements  Announcement[] // <-- Added relation

  @@map("courses")
}

model Assignment {
  id           String           @id @default(cuid())
  title        String
  description  String
  courseId     String
  instructorId String?
  dueDate      DateTime?
  maxPoints    Int?
  isPublished  Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  files        AssignmentFile[]
  course       Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  instructor   User?            @relation("InstructorAssignments", fields: [instructorId], references: [id])
  submissions  Submission[]

  @@map("assignments")
}

model AssignmentFile {
  id           String     @id @default(cuid())
  assignmentId String
  title        String
  description  String?
  filename     String
  mimeType     String
  fileSize     Int
  fileType     String
  fileUrl      String
  uploadedBy   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  uploader     User       @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("assignment_files")
}

model Submission {
  id           String           @id @default(cuid())
  assignmentId String
  studentId    String
  content      String?
  fileUrl      String?
  fileName     String?
  fileSize     Int?
  mimeType     String?
  grade        Float?
  feedback     String?
  status       SubmissionStatus @default(SUBMITTED)
  submittedAt  DateTime         @default(now())
  gradedAt     DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  assignment   Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student      User             @relation("StudentSubmissions", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([assignmentId, studentId])
  @@map("submissions")
}

model Enrollment {
  id        String           @id @default(cuid())
  userId    String
  courseId  String
  status    EnrollmentStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  course    Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model ChatMessage {
  id         String    @id @default(cuid())
  content    String
  userId     String
  courseId   String?
  chatRoomId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  chatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  course     Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model ChatRoom {
  id        String        @id @default(cuid())
  name      String
  courseId  String?
  isPublic  Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]
  course    Course?       @relation(fields: [courseId], references: [id])

  @@map("chat_rooms")
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String?
  filename    String
  mimeType    String
  fileSize    Int
  fileUrl     String
  uploadedBy  String
  courseId    String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course?  @relation(fields: [courseId], references: [id])
  uploader    User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Announcement {
  id         String              @id @default(cuid())
  title      String
  content    String              @db.Text
  priority   AnnouncementPriority @default(NORMAL)
  isImportant Boolean            @default(false)
  publishedAt DateTime?
  isDraft    Boolean             @default(false)
  
  // Relations
  course     Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId   String
  author     User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("announcements")
}

model WeeklyReport {
  id        String   @id @default(cuid())
  parentId  String
  studentId String
  weekStart DateTime // Start of the week (Monday)
  weekEnd   DateTime // End of the week (Sunday)
  sentAt    DateTime @default(now())
  emailSent Boolean  @default(false)
  
  // Report data (JSON stored as string)
  attendanceData String? // JSON string of attendance summary
  gradesData     String? // JSON string of grades summary
  
  parent  User @relation("ParentReports", fields: [parentId], references: [id], onDelete: Cascade)
  student User @relation("StudentReports", fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([parentId, studentId, weekStart])
  @@map("weekly_reports")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
  PARENT
}

enum EnrollmentStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum SubmissionStatus {
  SUBMITTED
  GRADED
  LATE
  RETURNED
}

enum NotificationType {
  ASSIGNMENT_CREATED
  ASSIGNMENT_DUE_SOON
  ASSIGNMENT_GRADED
  COURSE_ANNOUNCEMENT
  ENROLLMENT_APPROVED
  SUBMISSION_RECEIVED
  GENERAL
}

enum AnnouncementPriority {
  LOW
  NORMAL
  HIGH
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String           @db.Text
  data      String?          @db.Text // JSON string for additional data
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Schedule {
  id          String       @id @default(cuid())
  courseId    String
  dayOfWeek   Int          // 0-6 (Sunday to Saturday)
  startTime   String       // HH:MM format
  endTime     String       // HH:MM format
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  attendances Attendance[]

  @@map("schedules")
}

model Attendance {
  id        String           @id @default(cuid())
  userId    String
  courseId  String
  scheduleId String?
  date      DateTime
  status    AttendanceStatus @default(PRESENT)
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  schedule Schedule? @relation(fields: [scheduleId], references: [id], onDelete: SetNull)

  @@unique([userId, courseId, date])
  @@map("attendances")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}
